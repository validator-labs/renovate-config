name: Create Issue

on: 
  workflow_call:

concurrency: 
  group: create-issue-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-issue:
    if: contains(github.event.issue.labels.*.name, 'validatorctl')
    runs-on: [self-hosted, Linux, X64, validator]

    steps:
      - name: Filter Labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        id: filter_labels
        env:
          LABELS_JSON: ${{ toJson(github.event.issue.labels) }}
          LABEL_NAME: validatorctl
        with: 
          script: |
            const fs = require('fs');

            const labels = JSON.parse(process.env.LABELS_JSON);
            const labelToExclude = process.env.LABEL_NAME;

            const filteredLabels = labels
              .filter(label => label.name !== labelToExclude)
              .map(label => label.name);

            fs.appendFileSync(process.env.GITHUB_OUTPUT, `labels=${filteredLabels.join(',')}\n`);
          result-encoding: string

      - name: Create Issue
        id: create_issue
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ github.event.issue.title }}
          body: ${{ github.event.issue.body }}
          owner: validator-labs
          repo: validatorctl
          assignees: ${{ join(github.event.issue.assignees.*.login, ',') }}
          labels: ${{ steps.filter_labels.outputs.labels }}

      - name: Get Issue ID
        id: get_issue_id
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          ISSUE_JSON: ${{ steps.create_issue.outputs.json }}
        with:
          script: |
            const fs = require('fs');
            const issueJson = JSON.parse(process.env.ISSUE_JSON);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `issue_id=${issueJson.node_id}\n`);
          result-encoding: string

      - name: Create Project Card
        id: create_project_card
        env:
          PROJECT_ID: PVT_kwDOCVI7fM4AjJOl
        run: |
          curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --data '{"query":"mutation {addProjectV2ItemById(input: {projectId: \"${{ env.PROJECT_ID }}\" contentId: \"${{ steps.get_issue_id.outputs.issue_id }}\"}) {item {id}}}"}' 